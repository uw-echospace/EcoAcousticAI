name: Process OSN Bucket Data with Docker Model

on:
  schedule:
    - cron: '0 0 * * *' # Every night at midnight UTC
  workflow_dispatch:  # Allow manual triggering

jobs:
  process_data:
    runs-on: ubuntu-latest
    
    steps:
      # Step 1: Checkout repository (if any code changes are needed)
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Install rclone and configure it for OSN access
      - name: Set up rclone for OSN access
        run: |
          # Install rclone
          sudo apt-get update
          sudo apt-get install -y rclone

          # Create rclone config file with your OSN remote and bucket setup
          mkdir -p ~/.config/rclone
          echo "[osn_sdsc_ubna]" > ~/.config/rclone/rclone.conf
          echo "type = s3" >> ~/.config/rclone/rclone.conf
          echo "provider = Ceph" >> ~/.config/rclone/rclone.conf
          echo "access_key_id = " >> ~/.config/rclone/rclone.conf  # Leave blank for public access
          echo "secret_access_key = " >> ~/.config/rclone/rclone.conf  # Leave blank for public access
          echo "endpoint = https://sdsc.osn.xsede.org" >> ~/.config/rclone/rclone.conf
          echo "no_check_bucket = true" >> ~/.config/rclone/rclone.conf

      # Step 3: Check for the most recent directory in the OSN bucket
      - name: Check for most recent directory in OSN bucket
        id: check_data
        run: |
          # List directories in the OSN bucket using rclone
          NEW_DATA=$(rclone lsd osn_sdsc_ubna:bio230143-bucket01 | sort | tail -n 1)
          echo "Most recent directory: $NEW_DATA"

          # Check if a directory was found
          if [[ -z "$NEW_DATA" ]]; then
            echo "No new data found"
            echo "::set-output name=new_data::false"
          else
            # Check if the new directory is different from the last processed directory
            if [[ -f latest_directory.txt && $(cat latest_directory.txt) == "$NEW_DATA" ]]; then
              echo "No new data found, directory is the same as the last processed"
              echo "::set-output name=new_data::false"
            else
              echo "New data detected"
              echo "::set-output name=new_data::true"
              echo "::set-output name=new_data_path::osn_sdsc_ubna:bio230143-bucket01/${NEW_DATA}"
              
              # Save the most recent directory to a temporary file
              echo "$NEW_DATA" > latest_directory.txt
            fi
          fi

      # Step 4: Mount the OSN bucket and pass it directly to the Docker container
      - name: Mount OSN bucket and process data in Docker
        if: steps.check_data.outputs.new_data == 'true'
        run: |
        
            mkdir -p ~/osn_bucket
            rclone mount osn_sdsc_ubna:bio230143-bucket01 ~/osn_bucket --daemon
            
            # Get the most recent directory or file to process
            NEW_DATA_PATH="~/osn_bucket/${{ steps.check_data.outputs.new_data_path }}"

            # Ensure the file exists and is accessible
            if [[ ! -f "$NEW_DATA_PATH" ]]; then
                echo "Error: Data file not found: $NEW_DATA_PATH"
                exit 1
            fi

            # Check the file format and convert to .wav if necessary
            NEW_DATA_FILE=$(basename "$NEW_DATA_PATH")
            FILE_EXTENSION="${NEW_DATA_FILE##*.}"

            if [[ "${FILE_EXTENSION,,}" == "wav" ]]; then
                echo "File is already in WAV format."
            else
                echo "Converting ${NEW_DATA_FILE} to .wav format"
                # Install ffmpeg if not already installed
                sudo apt-get update && sudo apt-get install -y ffmpeg
                # Convert the audio file to .wav format using ffmpeg
                CONVERTED_PATH="~/osn_bucket/$(basename "${NEW_DATA_FILE%.*}").wav"
                ffmpeg -i "$NEW_DATA_PATH" "$CONVERTED_PATH"
                NEW_DATA_PATH="$CONVERTED_PATH"
            fi

            # Run the Docker container with the mounted OSN bucket file
            docker pull buzzfindr-image:latest
            docker run -v ~/osn_bucket:/app/recordings_2023/ buzzfindr-image:latest \
                python3 /app/src/batdt2_pipeline.py --input_audio="/app/recordings_2023/$(basename "$NEW_DATA_PATH")" \
                --output_directory="/app/recordings_2023/output" --run_model --csv

            # Clean up (optional, unmount the rclone mount)
            fusermount -u ~/osn_bucket || true


      # Step 5: Move the output to Jetstream2 "manila" folder
      - name: Move output to Manila folder on Jetstream2
        if: steps.check_data.outputs.new_data == 'true'
        run: |
          # Assuming you have Jetstream2 credentials set up
          sshpass -p "${{ secrets.JETSTREAM_PASSWORD }}" scp -r ~/osn_bucket/output/ user@jetstream2:/path/to/manila/folder/
          echo "Output moved to Jetstream2 manila folder"


